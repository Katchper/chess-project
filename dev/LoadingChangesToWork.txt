/**
     * The constructor for the game class. Creates a Board and Check object.
     */
    public Game(String Player1, String Player2) {
        LocalTime localTime = LocalTime.now();
        Calendar calendar = Calendar.getInstance();
        turn = true;
        board = new Board();
        check = new Check();
        fenSave = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0";
        this.Player1 = Player1;
        this.Player2 = Player2;
        fileName = "resources/saveGames/"+Player1+Player2+localTime.getHour()+"-"
                +localTime.getMinute()+"-"+localTime.getSecond()+"-"
                +calendar.get(Calendar.DATE)+"-"+calendar.get(Calendar.MONTH)
                +"-"+calendar.get(Calendar.YEAR)+".txt";

        FenConverter fenConv = new FenConverter();
        fenConv.writeLineToFile(fileName, Player1);
        fenConv.writeLineToFile(fileName, Player2);
        fenConv.writeLineToFile(fileName, fenConv.boardToFen(board, turn));

    }

    public Game(String directory, String Player1, String Player2) {
        FenConverter fenConv = new FenConverter();
        turn = true;
        board = new Board();
        check = new Check();
        this.Player1 = Player1;
        this.Player2 = Player2;

        if (directory.contains(".txt")){
            fileName = directory;
            try {
                fenSave = fenConv.topFenString(fileName);
            } catch (IOException ignore) {
            }

        } else {
            LocalTime localTime = LocalTime.now();
            Calendar calendar = Calendar.getInstance();
            fileName = "resources/saveGames/"+Player1+Player2+localTime.getHour()+"-"+localTime.getMinute()+"-"
                    +localTime.getSecond()+"-"+calendar.get(Calendar.DATE)+"-"
                    +calendar.get(Calendar.MONTH)+"-"+calendar.get(Calendar.YEAR)+".txt";
            fenSave = directory;
            fenConv.writeLineToFile(fileName, Player1);
            fenConv.writeLineToFile(fileName, Player2);
            fenConv.writeLineToFile(fileName, fenConv.boardToFen(board, turn));
        }
    }
    public Game(String directory){
        turn = true;
        board = new Board();
        check = new Check();
        fileName = directory;
        this.Player1 = "test1";
        this.Player2 = "test2";
        FenConverter fenConv = new FenConverter();
        fenSave = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0";
        try {
            this.fenList = fenConv.getAllFenStrings(fileName);
            board = fenConv.loadBoardFromFen(fenList.get(0));
        } catch (Exception exception){
            board = fenConv.loadBoardFromFen(fenSave);
        }
    }
    /**
     * Initiates and displays the game board.
     */
    public void initiateGame(){
        FenConverter fenConv = new FenConverter();
        board = fenConv.loadBoardFromFen(fenSave);
        try {
            this.fenList = fenConv.getAllFenStrings(fileName);
        } catch (Exception ignore){
        }

        if (!fenConv.isTurnColor()){
            turnExecution();
        }
        board.generateAllMoves();
        board.filterAllMoves();
    }


/////// REMOVE ONE LINE AND CHANGE ONE FROM LOADALLFENSTRINGS
REMOVE
fenStrings.remove(fenStrings.size()-1);

CHANGE
fenStrings.remove(1); -> 0


